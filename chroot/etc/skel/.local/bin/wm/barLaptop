#!/usr/bin/env bash
#
# never use /bin/bash
# and dont grep into cat :)
#
# A simple block-style bar using lemonbar
# and named pipes to reduce resource footprint
#
THEME_MODE=$(cat ~/.config/X11/theme)

if [[ $THEME_MODE = "LIGHT" ]]; then
    BBG=#f6f5f4
    WHT=#222
    BFG=#222
elif [[ $THEME_MODE = "DRACULA" ]]; then
    BBG=#191724
    WHT=#dfddf4
    BFG=#dfddf4
else
    BBG=#222222
    WHT=#ebdbb2
    BFG=#ebdbb2
fi

# colors
BLU=#cd6d8c
GLD=#c4a7e7
RED=#ea6962
HEART=#cd6d8c
REDRK=#662222

HIRED="%{F$RED}"
HIWHT="%{F$WHT}"

# Sleep constants
BATTERY_SLEEP=10
WIRELESS_SLEEP=10
VOLUME_SLEEP=1
WORKSPACE_SLEEP=1
DATE_SLEEP=5
MPC_SLEEP=10
MEMORY_SLEEP=10
# QUOTE_SLEEP=600
MAIL_SLEEP=120

SEP=" "
SEP2="%{B$BBG} "
CLR="${SEP}%{B-}${F-}"
BATCMD="acpi"

# buttons
POWER="%{A:rofiMenuPower.sh &:}%{F$BFG} ${SEP}%{A}"
SWITCH="%{A:rofiMenuTheme.sh &:}%{F$BFG} ${SEP}%{A}"

# bar config
screenWidth="$(expr $(wattr w $(lsw -r)))x27+0+0"
FONTS="-f "IBMPlexMono:size=11" -f "IosevkaNerdFontMono:size=13" -f "NotoSansMonoCJKJP:size=12" -f "NotoEmojiNerdFont:size=12""

#MAIL_ADDRESS='https\://elearning.hochschule-rhein-waal.de/webmail/'

PANEL_FIFO=/tmp/panel-fifo
OPTIONS="-a 200 -d ${FONTS} -B ${BBG} -F ${BFG} -R ${BBG} -g $screenWidth" 

[ -e "${PANEL_FIFO}" ] && rm "${PANEL_FIFO}"
mkfifo "${PANEL_FIFO}"

workspace()
{
   while true; do
       local cur=$(cat /tmp/ws)
       #local cur=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')
       local total=11
       local seq=""

       for ((i=1;i<cur;i++)); do
           seq+="%{A:xdotool key super+${i} &:}${i}%{A}${CLR}"
       done
       
       [[ ${i} = 10 ]] && seq+="%{A:xdotool key super+0 &:}%{F$BLU}0%{F$WHT}%{A}${CLR}" || seq+="%{A:xdotool key super+${i} &:}%{F$BLU}${i}%{F$WHT}%{A}${CLR}"

       min=$cur+1
       for ((i=min;i<total;i++)); do
	       ws=$(($i + 1))
	       [[ ${i} = 10 ]] && seq+="%{A:xdotool key super+0 &:}0%{A}${CLR}" || seq+="%{A:xdotool key super+${i} &:}${i}%{A}${CLR}"
       done
       local workspace="%{F$WHT} $seq"
       echo "WORKSPACE ${workspace}"

       sleep ${WORKSPACE_SLEEP}
   done
}

workspace > "${PANEL_FIFO}" &

clock() 
{
    while true; do
        local clock=$(printf '%(%a %d. %b %H:%M)T\n' "-1")
	echo "CLOCK %{A:notify-send -t 4000 'launching ikhal...' && kitty -e ikhal &:}%{F$WHT}${clock}${CLR}%{A}"

	[[ "$screenWidth" != "$(expr $(wattr w $(lsw -r)))x27+0+0" ]] && {
		move_windows.sh
     #if pgrep -x "picom" &>/dev/null; then
       #setbg
     #fi
	    setbg

		(sleep 1; barSwitch.sh & (sleep 1; barSwitch.sh))
	}

        sleep ${DATE_SLEEP}
    done
}

clock > "${PANEL_FIFO}" &

# quote() 
# {
#     while true; do
#         local quote="$(fortune -n 80 -s linux)"
# 	echo "QUOTE %{F$WHT}${quote}${CLR}"

#         sleep ${QUOTE_SLEEP}
#     done
# }

# quote > "${PANEL_FIFO}" &

volume()
{
    while true; do
	local vol="$(pamixer --get-volume)"
	local mut=$(pamixer --get-mute)

        if [[ ${mut} = "true" ]]; then
            label="${HIRED}${SEP}"
        elif [[ "$vol" -lt 60 ]]; then
            label="%{F#449f77}${SEP}"
        else
            label="%{F#449f77}${SEP}"
        fi

	if [[ ${mut} = "false" ]]; then
		echo "VOLUME ${HIWHT}%{A:notify-send -t 2000 'launching sound control...' && kitty -e pulsemixer &:}${label}${SEP}%{F$BFG}${vol}%{A}"
	else
		echo "VOLUME ${HIWHT}%{A:notify-send -t 2000 'launching sound control...' && kitty -e pulsemixer &:}${label}${SEP}%{F$RED}${vol}%{A}"
	fi

        sleep ${VOLUME_SLEEP} 
    done
}

volume > "${PANEL_FIFO}" &

battery()
{
    while true; do
        local cap="$(cat /sys/class/power_supply/BAT0/capacity)"

	if [ $cap -le "10" ]
	then
		echo "BATTERY %{F$HEART} ♥         "
	elif [ $cap -le "20" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥        "
	elif [ $cap -le "30" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥ ♥       "
	elif [ $cap -le "40" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥ ♥ ♥      "
	elif [ $cap -le "50" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥ ♥ ♥ ♥     "
	elif [ $cap -le "60" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥ ♥ ♥ ♥ ♥    "
        elif [ $cap -le "70" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥ ♥ ♥ ♥ ♥ ♥   "
        elif [ $cap -le "80" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥  "
	elif [ $cap -le "90" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥ "
	elif [ $cap -le "100" ]
	then
		echo "BATTERY %{F$HEART} ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥ ♥"
	fi

        sleep ${BATTERY_SLEEP}
    done
}

battery > "${PANEL_FIFO}" &

wireless() 
{
    while true; do
        local wifi=$(iwgetid -r)

        if [[ -z $wifi ]]; then
            local wifi="${HIRED}${SEP}${SEP}DISCONNECTED"
            echo "WIRELESS ${HIWHT}%{A:notify-send -t 2000 'launching network manager...' && kitty -e nmtui &:}${wifi}%{A}"
        else
            echo "WIRELESS ${HIWHT}%{A:notify-send -t 2000 'launching network manager...' && kitty -e nmtui &:}%{F#5188af}${SEP}${SEP}%{F$BFG}${wifi}%{A}"
        fi

        sleep ${WIRELESS_SLEEP}
    done
}

wireless > "${PANEL_FIFO}" &

memory() {
	while true; do
		while IFS=':k '  read -r key val _; do
			case $key in
				# See kernel commit 34e431b0ae398fc54ea69ff85ec700722c9da773
				(MemAvailable)
				local mem_avail=$(( $val / 1024 ))
				;;
		esac
	        done < /proc/meminfo
		echo "MEMORY ${HIWHT}%{A:notify-send -t 2000 'launching htop...' && kitty -e sudo htop &:}%{F#c4a7e7}${SEP}${SEP}%{F$BFG}${mem_avail} MiB%{A}"
		sleep ${MEMORY_SLEEP}
	done
}

memory > "${PANEL_FIFO}" &

mail() {
	while true; do
	    # mailcheck = small python script for imap
		newMails=$(mailcheck)
		if [[ $newMails -gt 0 ]]; then
			echo "MAIL %{A:notify-send -t 2000 'loading mails...' && evolution &:}%{F#8888cc}${SEP}%{F$BFG}${SEP}0%{A}"
		else
			echo "MAIL %{A:notify-send -t 2000 'loading mails...' && evolution &:}%{F#8888cc}${SEP}%{F$BFG}${SEP}$newMails%{A}"
		fi
		sleep ${MAIL_SLEEP}
	done
}

mail > "${PANEL_FIFO}" &

music() {
	while true; do
		#mpc
		#local title=$(mpc -f %title% current)
		#cmus
		local artist=$(cmus-remote -C status | grep " artist " | cut -c 12-)
		local title=$(cmus-remote -C status | grep title | cut -c 10-)
		if [[ $title == '' ]]; then
			echo "MUSIC "
		else
			echo "MUSIC %{F#c8a976}%{F$WHT} $artist - $title"
		fi
		sleep ${MPC_SLEEP}
	done
}

music > "${PANEL_FIFO}" &

while read -r line; do
    case $line in
        CLOCK*)
            fn_time="${line#CLOCK }"
            ;;
        VOLUME*)
            fn_vol="${line#VOLUME }"
            ;;
        BATTERY*)
            fn_bat="${line#BATTERY }"
            ;;
        WIRELESS*)
            fn_wire="${line#WIRELESS }"
            ;;
        MEMORY*)
            fn_mem="${line#MEMORY }"
            ;;
        MAIL*)
            fn_mail="${line#MAIL }"
            ;;
        MUSIC*)
            fn_music="${line#MUSIC }"
            ;;
        WORKSPACE*)
            fn_workspace="${line#WORKSPACE }"
            ;;
       #QUOTE*)
       #    fn_quote="${line#QUOTE }"
       #    ;;
    esac

    final_output="%{l}${fn_workspace}%{A:cmus-remote -u &:}${fn_music}%{A}%{c}${fn_time}%{r}${SWITCH}${fn_mail}${SEP2}${fn_mem}${SEP2}${fn_wire}${SEP2}${fn_vol}${SEP2}${POWER}%{A:bat-notify &:}${fn_bat}%{A}${SEP}%{B$BBG}"

    echo "%{S0}$final_output%{S1}$final_output"
    

done < "${PANEL_FIFO}" | lemonbar ${OPTIONS} | sh > /dev/null
